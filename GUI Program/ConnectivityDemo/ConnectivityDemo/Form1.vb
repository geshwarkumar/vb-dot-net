Imports System.ComponentModel
Imports System.Text
Imports System.Data.SqlClient
Imports System.Security.Cryptography
Imports DevExpress.XtraEditors
Imports DevExpress.XtraGrid.Views.Grid
Imports System.Text.RegularExpressions
Imports myDll

Partial Public Class frm_Registration
    Dim connection As SqlConnection = New SqlConnection()
    Shared Sub New()
        DevExpress.UserSkins.BonusSkins.Register()
        DevExpress.Skins.SkinManager.EnableFormSkins()
    End Sub
    Public Sub New()
        InitializeComponent()
        ' This line of code is generated by Data Source Configuration Wizard
        ' Fill a SqlDataSource
        SqlDataSource1.Fill()
    End Sub


    Private Sub btn_Clear_Click(Optional sender As Object = Nothing, Optional e As EventArgs = Nothing) Handles btn_Clear.Click

        txtPassword.Text = ""
        txt_ConPassword.Text = ""
        txt_Contact.Text = ""
        txt_EmailID.Text = ""
        txt_Fullname.Text = ""

    End Sub
    Public Function CreateConnectionDB() As Object
        connection.ConnectionString = "Data Source=(LocalDb)\MSSQLLocalDB;Initial Catalog=db_ConnectivityDemo;Integrated Security=True"
        Return connection.ConnectionString
    End Function

    Private Sub btn_Save_Click(sender As Object, e As EventArgs) Handles btn_Save.Click
        If isNotNullorEmpty() = False Then
            MsgBox("Null or Empty" & vbCrLf & "Empty field not accepted")
            Exit Sub
        End If
        If isEqualPass() = False Then
            MsgBox("Unmatched Password" & vbCrLf & "Please enter password again!")
            txtPassword.Text = ""
            txt_ConPassword.Text = ""
            txtPassword.Focus()
            Exit Sub
        End If
        Dim fullname As String = txt_Fullname.Text
        Dim email As String = txt_EmailID.Text
        Dim splitContact As String() = txt_Contact.Text.Split(New Char() {" "})
        'Console.WriteLine(splitContact(0) & "___" & splitContact(1))
        Dim contact As Long = Convert.ToInt64(splitContact(0) & splitContact(1))
        Dim password As String = txtPassword.Text
        Dim userinfoid As String = GenerateString().ToString()

        Dim query As String = "INSERT INTO tbl_UserInfo(UserInfoID,Fullname,EmailID,Contact,Password) VALUES(@userinfoid,@fullname,@email,@contact,@password)"

        Using connection As New SqlConnection("Data Source=(LocalDb)\MSSQLLocalDB;Initial Catalog=db_ConnectivityDemo;Integrated Security=True")

            Using command As New SqlCommand()
                With command
                    .Connection = connection
                    .CommandType = CommandType.Text
                    .CommandText = query
                    .Parameters.Clear()
                    .Parameters.AddWithValue("@userinfoid", userinfoid)
                    .Parameters.AddWithValue("@fullname", fullname)
                    .Parameters.AddWithValue("@email", email)
                    .Parameters.AddWithValue("@contact", contact)
                    .Parameters.AddWithValue("@password", password)

                    Try
                        connection.Open()
                        command.ExecuteNonQuery()
                    Finally
                        .Parameters.Clear()
                        btn_Clear_Click()
                        frm_Registration_Load()
                        connection.Close()
                    End Try
                End With
            End Using

        End Using
    End Sub
    Private Function GenerateString() As Object

        'Dim xSpecialCharArray() As Char = "@#$%&*_=".ToCharArray
        'Dim xCharArray() As Char = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray
        Dim xNoArray() As Char = "0123456789".ToCharArray
        Dim xGenerator As System.Random = New System.Random()
        Dim xStr As String = String.Empty

        While xStr.Length < 6

            'If xGenerator.Next(0, 2) = 0 Then
            '    'xStr &= xCharArray(xGenerator.Next(0, xCharArray.Length))
            '    'ElseIf (xGenerator.Next(0, 3) = 0) Then
            '    '    xStr &= xSpecialCharArray(xGenerator.Next(0, xSpecialCharArray.Length))
            'Else
            xStr &= xNoArray(xGenerator.Next(0, xNoArray.Length))
            'End If

        End While

        Return xStr

    End Function

    Private Sub btn_View_Click(sender As Object, e As EventArgs) Handles btn_View.Click
        Dim report = New rpt_UserInfo
        report.showUserInfo()
        report.CreateDocument(True)
        '        ' if statements behave like as loop
        '        Dim len As Integer = 1
        'startpoint:
        '        If len > 0 Then
        '            Console.WriteLine("Len = " & len)
        '            len += 1
        '            If len = 10 Then
        '                GoTo exitpoint
        '            Else
        '                GoTo startpoint
        '            End If
        'exitpoint:
        '        End If
    End Sub

    Private Sub btn_Export_Click(sender As Object, e As EventArgs) Handles btn_Export.Click
        Dim exportFile As New SaveFileDialog() With {.Filter = "Excel File|*.xls", .Title = "Export To Excel", .FileName = "ExcelFileReportUserInfo"}
        If exportFile.ShowDialog = DialogResult.OK Then
            grd_View.ExportToXls(exportFile.FileName)
        End If
    End Sub

    Private Sub btn_Update_Click(sender As Object, e As EventArgs) Handles btn_Update.Click
        If isNotNullorEmpty() = False Then
            MsgBox("Null or Empty" & vbCrLf & "Empty field not accepted")
            Exit Sub
        End If
        If isEqualPass() = False Then
            MsgBox("Unmatched Password" & vbCrLf & "Please enter password again!")
            txtPassword.Text = ""
            txt_ConPassword.Text = ""
            txtPassword.Focus()
            Exit Sub
        End If
        Dim fullname As String = txt_Fullname.Text
        Dim email As String = txt_EmailID.Text
        Dim splitContact As String() = txt_Contact.Text.Split(New Char() {" "})
        Dim contact As Long = Convert.ToInt64(splitContact(0) & splitContact(1))
        Dim password As String = txtPassword.Text
        Dim userinfoid As String = lblUserInfoID.Text

        Dim query As String = "UPDATE tbl_UserInfo SET Fullname=@fullname, EmailID=@email, Contact=@contact, Password=@password WHERE UserInfoID=@userinfoid"

        Using connection As New SqlConnection("Data Source=(LocalDb)\MSSQLLocalDB;Initial Catalog=db_ConnectivityDemo;Integrated Security=True")

            Using command As New SqlCommand()
                With command
                    .Connection = connection
                    .CommandType = CommandType.Text
                    .CommandText = query
                    .Parameters.Clear()
                    .Parameters.AddWithValue("@userinfoid", userinfoid)
                    .Parameters.AddWithValue("@fullname", fullname)
                    .Parameters.AddWithValue("@email", email)
                    .Parameters.AddWithValue("@contact", contact)
                    .Parameters.AddWithValue("@password", password)

                    Try
                        connection.Open()
                        command.ExecuteNonQuery()
                    Finally
                        .Parameters.Clear()
                        btn_Clear_Click()
                        frm_Registration_Load()
                        connection.Close()
                    End Try
                End With
            End Using

        End Using
    End Sub

    Private Sub btn_Edit_Click(sender As Object, e As EventArgs) Handles btn_Edit.Click
        btn_Update.Enabled = True
        btn_Save.Enabled = False
        Dim selectedRows As Integer() = DirectCast(GridView1, GridView).GetSelectedRows()
        Dim selectedRow As DataRowView = DirectCast(GridView1.GetRow(selectedRows(0)), DataRowView)
        Dim valueStr As String = selectedRow("UserInfoID").ToString()

        Dim query As String = String.Format("SELECT [UserInfoID],[Fullname],[EmailID],[Contact],[Password] FROM [db_ConnectivityDemo].[dbo].[tbl_UserInfo] WHERE [UserInfoID] = {0}", valueStr)
        Dim ds As New DataSet
        Dim da As New SqlDataAdapter
        Dim dt As New DataTable
        Dim connection As New SqlConnection("Data Source=(LocalDb)\MSSQLLocalDB;Initial Catalog=db_ConnectivityDemo;Integrated Security=True")
        connection.Open()
        Try
            da = New SqlDataAdapter(query, connection)
            da.Fill(ds)
            dt = ds.Tables(0)
            txt_Fullname.Text = dt.Rows(0).Item(txt_Fullname.Tag.ToString).ToString
            txt_EmailID.Text = dt.Rows(0).Item(txt_EmailID.Tag.ToString).ToString
            txt_Contact.Text = dt.Rows(0).Item(txt_Contact.Tag.ToString).ToString
            txtPassword.Text = dt.Rows(0).Item(txtPassword.Tag.ToString).ToString
            lblUserInfoID.Text = dt.Rows(0).Item(lblUserInfoID.Tag.ToString).ToString
        Catch ex As Exception
            MsgBox("Can't load data." & vbCrLf & ex.Message)
            ds = Nothing
        Finally
            connection.Close()
            connection.Dispose()
            connection = Nothing
        End Try

    End Sub
    Private Sub grd_View_DoubleClick(sender As Object, e As EventArgs) Handles grd_View.DoubleClick
        btn_Update.Enabled = True
        btn_Save.Enabled = False
        Dim selectedRows As Integer() = DirectCast(GridView1, GridView).GetSelectedRows()
        Dim selectedRow As DataRowView = DirectCast(GridView1.GetRow(selectedRows(0)), DataRowView)
        Dim valueStr As String = selectedRow("UserInfoID").ToString()

        Dim query As String = String.Format("SELECT [UserInfoID],[Fullname],[EmailID],[Contact],[Password] FROM [db_ConnectivityDemo].[dbo].[tbl_UserInfo] WHERE [UserInfoID] = {0}", valueStr)
        Dim ds As New DataSet
        Dim da As New SqlDataAdapter
        Dim dt As New DataTable
        Dim connection As New SqlConnection("Data Source=(LocalDb)\MSSQLLocalDB;Initial Catalog=db_ConnectivityDemo;Integrated Security=True")
        connection.Open()
        Try
            da = New SqlDataAdapter(query, connection)
            da.Fill(ds)
            dt = ds.Tables(0)
            txt_Fullname.Text = dt.Rows(0).Item(txt_Fullname.Tag.ToString).ToString
            txt_EmailID.Text = dt.Rows(0).Item(txt_EmailID.Tag.ToString).ToString
            txt_Contact.Text = dt.Rows(0).Item(txt_Contact.Tag.ToString).ToString
            txtPassword.Text = dt.Rows(0).Item(txtPassword.Tag.ToString).ToString
            lblUserInfoID.Text = dt.Rows(0).Item(lblUserInfoID.Tag.ToString).ToString
        Catch ex As Exception
            MsgBox("Can't load data." & vbCrLf & ex.Message)
            ds = Nothing
        Finally
            connection.Close()
            connection.Dispose()
            connection = Nothing
        End Try
    End Sub

    Private Sub frm_Registration_Load(Optional sender As Object = Nothing, Optional e As EventArgs = Nothing) Handles MyBase.Load
        'TODO: This line of code loads data into the 'Db_ConnectivityDemoDataSet.tbl_UserInfo' table. You can move, or remove it, as needed.
        Me.Tbl_UserInfoTableAdapter.Fill(Me.Db_ConnectivityDemoDataSet.tbl_UserInfo)
        btn_Update.Enabled = False
        btn_Save.Enabled = True
    End Sub
    '/// validation
    Public Function isNotNullorEmpty() As Boolean
        Dim result As Boolean = False
        If String.IsNullOrEmpty(txt_Fullname.Text) OrElse String.IsNullOrWhiteSpace(txt_Fullname.Text) Then
            result = False
        ElseIf String.IsNullOrEmpty(txt_EmailID.Text) OrElse String.IsNullOrWhiteSpace(txt_EmailID.Text) Then
            result = False
        ElseIf String.IsNullOrEmpty(txt_Contact.Text) OrElse String.IsNullOrWhiteSpace(txt_Contact.Text) Then
            result = False
        ElseIf String.IsNullOrEmpty(txtPassword.Text) OrElse String.IsNullOrWhiteSpace(txtPassword.Text) Then
            result = False
        ElseIf String.IsNullOrEmpty(txt_ConPassword.Text) OrElse String.IsNullOrWhiteSpace(txt_ConPassword.Text) Then
            result = False
        Else
            result = True
        End If
        isNotNullorEmpty = result
    End Function
    '/// compare password and confirm password
    Public Function isEqualPass() As Boolean
        If String.Compare(txtPassword.Text, txt_ConPassword.Text) = 0 Then
            Return True
        Else
            Return False
        End If
    End Function

    '/// validate numeric text boxes
    Public Function isNumericVal() As Boolean
        If IsNumeric(txt_Contact.Text) Then
            Return True
        Else
            Return False
        End If
    End Function


    Private Sub txt_Contact_KeyUp(sender As Object, e As KeyEventArgs) Handles txt_Contact.KeyUp
        'If isNumericVal() = False Then txt_Contact.Text = ""
    End Sub

    Private Sub txt_EmailID_EditValueChanged(sender As Object, e As EventArgs) Handles txt_EmailID.EditValueChanged, txt_EmailID.Leave
        If IsValidEmailFormat(txt_EmailID.Text) = False Then txt_EmailID.Text = ""
    End Sub
    Function IsValidEmailFormat(ByVal s As String) As Boolean
        Return Regex.IsMatch(s, "^([0-9a-zA-Z]([-\.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$")
    End Function

    Private Sub txtPassword_EditValueChanged(sender As Object, e As EventArgs) Handles txtPassword.EditValueChanged
        'If Not txtPassword.Text.Length > 5 Then
        '    txtPassword.Text = ""
        'ElseIf Not txtPassword.Text.Length < 9 Then
        '    txtPassword.Text = ""
        'End If
    End Sub

    Private Sub txtPassword_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtPassword.KeyPress
        'If Not txtPassword.Text.Length > 5 Then
        '    txtPassword.Focus()
        'ElseIf Not txtPassword.Text.Length < 8 Then
        '    txtPassword.Focus()
        'End If
        'If txtPassword.Text.Length > 8 Then
        '    txt_ConPassword.Focus()
        'End If
    End Sub

    Private Sub txt_ConPassword_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txt_ConPassword.KeyPress
        'If Not txtPassword.Text.Length > 5 Then
        '    txtPassword.Focus()
        'ElseIf Not txtPassword.Text.Length < 8 Then
        '    txtPassword.Focus()
        'End If
        'If txtPassword.Text.Length > 8 Then
        '    btn_Save.Focus()
        'End If
    End Sub

End Class